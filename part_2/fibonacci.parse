identifier -> IDENT(empty)
declaration-block-optional -> epsilon
declaration-block-optional -> epsilon
statement-block-optional -> epsilon
function -> FUNCTION identifier SEMICOLON BEGIN_PARAMS declaration-block-optional END_PARAMS BEGIN_LOCALS declaration-block-optional END_LOCALS BEGIN_BODY statement-block-optional END_BODY
identifier -> IDENT(fibonacci)
identifier -> IDENT(k)
identifier-block -> identifier
declaration-type -> INTEGER
declaration -> identifier-block COLON declaration-type
declaration-block -> declaration SEMICOLON
declaration-block-optional -> declaration-block
declaration-block-optional -> epsilon
identifier -> IDENT(k)
var -> identifier
term-body -> var
term -> term-body
multiplicative-expr -> term
expression -> multiplicative-expr
comp -> LTE
term-body -> NUMBER
term -> term-body
multiplicative-expr -> term
expression -> multiplicative-expr
relation-expr-body -> expression comp expression
relation-expr -> relation-expr-body
relation-and-expr -> relation-expr
bool-expr -> relation-and-expr
relation-expr-body -> L_PAREN bool-expr R_PAREN
relation-expr -> relation-expr-body
relation-and-expr -> relation-expr
bool-expr -> relation-and-expr
term-body -> NUMBER
term -> term-body
multiplicative-expr -> term
expression -> multiplicative-expr
statement -> RETURN expression
statement-block -> statement SEMICOLON
statement -> IF bool-expr THEN statement-then ENDIF
identifier -> IDENT(k)
var -> identifier
term-body -> var
term -> term-body
multiplicative-expr -> term
term-body -> NUMBER
term -> term-body
multiplicative-expr -> term
expression -> multiplicative-expr
expression -> multiplicative-expr SUB expression
expression-block -> expression
term -> IDENT L_PAREN expression-block R_PAREN
multiplicative-expr -> term
identifier -> IDENT(k)
var -> identifier
term-body -> var
term -> term-body
multiplicative-expr -> term
term-body -> NUMBER
term -> term-body
multiplicative-expr -> term
expression -> multiplicative-expr
expression -> multiplicative-expr SUB expression
expression-block -> expression
term -> IDENT L_PAREN expression-block R_PAREN
multiplicative-expr -> term
expression -> multiplicative-expr
expression -> multiplicative-expr ADD expression
statement -> RETURN expression
statement-block -> statement SEMICOLON
statement-block -> statement SEMICOLON statement-block
statement-block-optional -> statement-block
function -> FUNCTION identifier SEMICOLON BEGIN_PARAMS declaration-block-optional END_PARAMS BEGIN_LOCALS declaration-block-optional END_LOCALS BEGIN_BODY statement-block-optional END_BODY
identifier -> IDENT(main)
declaration-block-optional -> epsilon
identifier -> IDENT(n)
identifier-block -> identifier
declaration-type -> INTEGER
declaration -> identifier-block COLON declaration-type
identifier -> IDENT(fib_n)
identifier-block -> identifier
declaration-type -> INTEGER
declaration -> identifier-block COLON declaration-type
declaration-block -> declaration SEMICOLON
declaration-block -> declaration SEMICOLON declaration-block
declaration-block-optional -> declaration-block
identifier -> IDENT(n)
var -> identifier
var-block -> var
statement -> READ var-block
identifier -> IDENT(fib_n)
var -> identifier
identifier -> IDENT(n)
var -> identifier
term-body -> var
term -> term-body
multiplicative-expr -> term
expression -> multiplicative-expr
expression-block -> expression
term -> IDENT L_PAREN expression-block R_PAREN
multiplicative-expr -> term
expression -> multiplicative-expr
statement -> var ASSIGN expression
identifier -> IDENT(fib_n)
var -> identifier
var-block -> var
statement -> WRITE var-block
statement-block -> statement SEMICOLON
statement-block -> statement SEMICOLON statement-block
statement-block -> statement SEMICOLON statement-block
statement-block-optional -> statement-block
function -> FUNCTION identifier SEMICOLON BEGIN_PARAMS declaration-block-optional END_PARAMS BEGIN_LOCALS declaration-block-optional END_LOCALS BEGIN_BODY statement-block-optional END_BODY
function-block -> function function-block
function-block -> function function-block
function-block -> function function-block
program -> function-block
